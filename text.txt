CREATE TABLE IF NOT EXISTS User_table (
    First_name VARCHAR(50) NOT NULL,
    Last_name VARCHAR(50) NOT NULL,
    Telephone VARCHAR(50) NOT NULL,
    Email_id VARCHAR(100) PRIMARY KEY,
    password VARCHAR(50) NOT NULL
    );

				
CREATE TABLE IF NOT EXISTS Salon_user(
	Org_number int PRIMARY KEY, 
	NAME VARCHAR(50) NOT NULL,
	username VARCHAR(100) UNIQUE,
	Telephone VARCHAR(50) NOT NULL,
	Address VARCHAR(200) NOT NULL,
	password text NOT NULL
);


CREATE TABLE IF NOT EXISTS SERVICE(
    Service_id SERIAL PRIMARY KEY,
    Service_name VARCHAR(100) NOT NULL, 
    Price INT NOT NULL,
    DESCRIPTION VARCHAR(400) NOT NULL,
    Image bytea,
    Salon_username VARCHAR(50),
    FOREIGN KEY(Salon_username) REFERENCES Salon_user(username)
);


CREATE TABLE IF NOT EXISTS BOOKING(
    User_id serial NOT NULL,
    Service_id serial NOT NULL,
    order_date DATE,
    order_time DATE,

	FOREIGN KEY(User_id) REFERENCES User_table(User_id),
	FOREIGN KEY(Service_id) REFERENCES SERVICE(Service_id)
);


.salon_discription{
    text-align: center;
    padding: 150px 0px 20px 0px;
    text-transform: uppercase;
}

.salon_discription h2{
    font-weight:300;
}

.cards {
    width: 90%;
    margin: 16px auto;
}

.title {
    font-weight: 700;
    font-size: 24px;
    text-transform: uppercase;
}

.image img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    object-position: 25% 50%;
}

.content {
    background-color: #e6e6e68f;
    padding: 24px 32px;
}

.card {
    display: inline-block;
    width: 32%;
    margin-right: 1%;
    margin-bottom: 16px;
    vertical-align: top;
}

/* Grid with Flex */
@supports (display: grid) {
    .cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        grid-gap: 16px;
        grid-auto-rows: 1fr;
    }

    /* to make background fill entire height */

    .card {
        width: auto;
        margin: 0;
        display: flex;
        flex-direction: column;
    }

    /* Uncomment to make text same height */
    .content {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    button {
        margin-top: auto;
    }
}







DB_connection.py
Extra function


# Reads data from the table user_table in database
def display_table_data(user_table):
    conn = None
    cur = None
    try:
        conn = database_connection()
        cur = conn.cursor()
        cur.execute("SELECT * FROM user_table")
        rows = cur.fetchall()
        for row in rows:
            print(row)
    except (Exception, psycopg2.databaseError) as error:
        print("Error while fetching data from user_table", error)
    finally:
        if cur is not None:
            cur.close()
        if conn is not None:
            conn.close()





@webApp.route('/salon/<int:salon_id>')
def salon_page(salon_id):
    # Retrieve salon data based on the salon_id
    cursor.execute(
        "SELECT name, username, telephone, address FROM salon_user WHERE org_number = %s", (salon_id,))
    salon_data = cursor.fetchone()
    if not salon_data:
    # Handle case where salon ID is not found
        return "Salon not found"
    username = salon_data[1] 
    cursor.execute(
        "SELECT service_name, price, description FROM service WHERE salon_username = %s", (username,))
    service_info = cursor.fetchall()
    if not service_info: 
        return "Service not found"
    # Pass the salon data to the template for rendering
    return render_template('salon.html', salon_data = salon_data, service_info = service_info)
